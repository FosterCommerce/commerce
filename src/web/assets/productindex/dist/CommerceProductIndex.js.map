{"version":3,"file":"CommerceProductIndex.js","mappings":"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","sources":["webpack:///./CommerceProductIndex.js"],"sourcesContent":["/** global: Craft */\n/** global: Garnish */\n/**\n * Product index class\n */\nCraft.Commerce.ProductIndex = Craft.BaseElementIndex.extend(\n    {\n        editableProductTypes: null,\n        $newProductBtnProductType: null,\n        $newProductBtn: null,\n\n        init: function(elementType, $container, settings) {\n          console.log('Product index');\n            this.on('selectSource', $.proxy(this, 'updateButton'));\n            this.on('selectSite', $.proxy(this, 'updateButton'));\n            this.base(elementType, $container, settings);\n        },\n\n        afterInit: function() {\n            // Find which of the visible productTypes the user has permission to create new products in\n            this.editableProductTypes = [];\n\n            for (var i = 0; i < Craft.Commerce.editableProductTypes.length; i++) {\n                var productType = Craft.Commerce.editableProductTypes[i];\n\n                if (this.getSourceByKey('productType:' + productType.id)) {\n                    this.editableProductTypes.push(productType);\n                }\n            }\n\n            this.base();\n        },\n\n        getDefaultSourceKey: function() {\n            // Did they request a specific product productType in the URL?\n            if (this.settings.context === 'index' && typeof defaultProductTypeHandle !== 'undefined') {\n                for (var i = 0; i < this.$sources.length; i++) {\n                    var $source = $(this.$sources[i]);\n\n                    if ($source.data('handle') === defaultProductTypeHandle) {\n                        return $source.data('key');\n                    }\n                }\n            }\n\n            return this.base();\n        },\n\n        updateButton: function() {\n            if (!this.$source) {\n                return;\n            }\n\n            // Get the handle of the selected source\n            var selectedSourceHandle = this.$source.data('handle');\n\n            var i, href, label;\n\n            // Update the New Product button\n            // ---------------------------------------------------------------------\n\n            if (this.editableProductTypes.length) {\n                // Remove the old button, if there is one\n                if (this.$newProductBtnProductType) {\n                    this.$newProductBtnProductType.remove();\n                }\n\n                // Determine if they are viewing a productType that they have permission to create products in\n                var selectedProductType;\n\n                if (selectedSourceHandle) {\n                    for (i = 0; i < this.editableProductTypes.length; i++) {\n                        if (this.editableProductTypes[i].handle === selectedSourceHandle) {\n                            selectedProductType = this.editableProductTypes[i];\n                            break;\n                        }\n                    }\n                }\n\n                this.$newProductBtnProductType = $('<div class=\"btngroup submit\"/>');\n                var $menuBtn;\n\n                // If they are, show a primary \"New product\" button, and a dropdown of the other productTypes (if any).\n                // Otherwise only show a menu button\n                if (selectedProductType) {\n                    href = this._getProductTypeTriggerHref(selectedProductType);\n                    label = (this.settings.context === 'index' ? Craft.t('commerce', 'New product') : Craft.t('commerce', 'New {productType} product', {productType: selectedProductType.name}));\n                    this.$newProductBtn = $('<a class=\"btn submit add icon\" ' + href + '>' + Craft.escapeHtml(label) + '</a>').appendTo(this.$newProductBtnProductType);\n\n                    if (this.settings.context !== 'index') {\n                        this.addListener(this.$newProductBtn, 'click', function(ev) {\n                            this._openCreateProductModal(ev.currentTarget.getAttribute('data-id'));\n                        });\n                    }\n\n                    if (this.editableProductTypes.length > 1) {\n                        $menuBtn = $('<div class=\"btn submit menubtn\"></div>').appendTo(this.$newProductBtnProductType);\n                    }\n                }\n                else {\n                    this.$newProductBtn = $menuBtn = $('<div class=\"btn submit add icon menubtn\">' + Craft.t('commerce', 'New product') + '</div>').appendTo(this.$newProductBtnProductType);\n                }\n\n                if ($menuBtn) {\n                    var menuHtml = '<div class=\"menu\"><ul>';\n\n                    for (i = 0; i < this.editableProductTypes.length; i++) {\n                        var productType = this.editableProductTypes[i];\n\n                        if (this.settings.context === 'index' || productType !== selectedProductType) {\n                            href = this._getProductTypeTriggerHref(productType);\n                            label = (this.settings.context === 'index' ? productType.name : Craft.t('commerce', 'New {productType} product', {productType: productType.name}));\n                            menuHtml += '<li><a ' + href + '\">' + Craft.escapeHtml(label) + '</a></li>';\n                        }\n                    }\n\n                    menuHtml += '</ul></div>';\n\n                    $(menuHtml).appendTo(this.$newProductBtnProductType);\n                    var menuBtn = new Garnish.MenuBtn($menuBtn);\n\n                    if (this.settings.context !== 'index') {\n                        menuBtn.on('optionSelect', $.proxy(function(ev) {\n                            this._openCreateProductModal(ev.option.getAttribute('data-id'));\n                        }, this));\n                    }\n                }\n\n                this.addButton(this.$newProductBtnProductType);\n            }\n\n            // Update the URL if we're on the Categories index\n            // ---------------------------------------------------------------------\n\n            if (this.settings.context === 'index' && typeof history !== 'undefined') {\n                var uri = 'commerce/products';\n\n                if (selectedSourceHandle) {\n                    uri += '/' + selectedSourceHandle;\n                }\n\n                history.replaceState({}, '', Craft.getUrl(uri));\n            }\n        },\n\n        _getProductTypeTriggerHref: function(productType) {\n            if (this.settings.context === 'index') {\n                var uri = 'commerce/products/' + productType.handle + '/new';\n                if (this.siteId && this.siteId != Craft.primarySiteId) {\n                    for (var i = 0; i < Craft.sites.length; i++) {\n                        if (Craft.sites[i].id == this.siteId) {\n                            uri += '/'+Craft.sites[i].handle;\n                        }\n                    }\n                }\n                return 'href=\"' + Craft.getUrl(uri) + '\"';\n            }\n            else {\n                return 'data-id=\"' + productType.id + '\"';\n            }\n        },\n\n        _openCreateProductModal: function(productTypeId) {\n            if (this.$newProductBtn.hasClass('loading')) {\n                return;\n            }\n\n            // Find the productType\n            var productType;\n\n            for (var i = 0; i < this.editableProductTypes.length; i++) {\n                if (this.editableProductTypes[i].id == productTypeId) {\n                    productType = this.editableProductTypes[i];\n                    break;\n                }\n            }\n\n            if (!productType) {\n                return;\n            }\n\n            this.$newProductBtn.addClass('inactive');\n            var newProductBtnText = this.$newProductBtn.text();\n            this.$newProductBtn.text(Craft.t('commerce', 'New {productType} product', {productType: productType.name}));\n\n            Craft.createElementEditor(this.elementType, {\n                hudTrigger: this.$newProductBtnProductType,\n                elementType: 'craft\\\\elements\\\\Product',\n                siteId: this.siteId,\n                attributes: {\n                    productTypeId: productTypeId\n                },\n                onBeginLoading: $.proxy(function() {\n                    this.$newProductBtn.addClass('loading');\n                }, this),\n                onEndLoading: $.proxy(function() {\n                    this.$newProductBtn.removeClass('loading');\n                }, this),\n                onHideHud: $.proxy(function() {\n                    this.$newProductBtn.removeClass('inactive').text(newProductBtnText);\n                }, this),\n                onSaveElement: $.proxy(function(response) {\n                    // Make sure the right productType is selected\n                    var productTypeSourceKey = 'productType:' + productTypeId;\n\n                    if (this.sourceKey !== productTypeSourceKey) {\n                        this.selectSourceByKey(productTypeSourceKey);\n                    }\n\n                    this.selectElementAfterUpdate(response.id);\n                    this.updateElements();\n                }, this)\n            });\n        }\n    });\n\n// Register it!\nCraft.registerElementIndexClass('craft\\\\commerce\\\\elements\\\\Product', Craft.Commerce.ProductIndex);\n"],"names":["Craft","Commerce","ProductIndex","BaseElementIndex","extend","editableProductTypes","$newProductBtnProductType","$newProductBtn","init","elementType","$container","settings","console","log","this","on","$","proxy","base","afterInit","i","length","productType","getSourceByKey","id","push","getDefaultSourceKey","context","defaultProductTypeHandle","$sources","$source","data","updateButton","href","label","selectedSourceHandle","selectedProductType","$menuBtn","remove","handle","_getProductTypeTriggerHref","t","name","escapeHtml","appendTo","addListener","ev","_openCreateProductModal","currentTarget","getAttribute","menuHtml","menuBtn","Garnish","MenuBtn","option","addButton","history","uri","replaceState","getUrl","siteId","primarySiteId","sites","productTypeId","hasClass","addClass","newProductBtnText","text","createElementEditor","hudTrigger","attributes","onBeginLoading","onEndLoading","removeClass","onHideHud","onSaveElement","response","productTypeSourceKey","sourceKey","selectSourceByKey","selectElementAfterUpdate","updateElements","registerElementIndexClass"],"sourceRoot":""}