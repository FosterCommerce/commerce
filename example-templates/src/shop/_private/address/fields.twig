<!-- Template: {{ _self }}.twig -->
{#
Outputs address form fields for editing an address.
#}
{# @var address \craft\elements\Address #}

{# Define a simple a Twig macro for outputting validation errors and making template less redundant #}
{% macro displayErrors(address, fieldName) %}
  {% if address and address.getErrors(fieldName) %}
    <div class="text-red-700">{{ address.getErrors(fieldName)|join }}</div>
  {% endif %}
{% endmacro %}

<div class="">
  {# First and last name fields #}
  <div class="my-2">
    <label for="title">
      {{- 'Address Label (Work, School, etc)'|t -}}
    </label>
    {{ input('text', 'title', address ? address.title : '', {
      id: 'title',
      class: ['w-full', '[[classes.input]]']
    }) }}
    {{ _self.displayErrors(address, 'title') }}
  </div>

  <div class="my-2">
      <label for="fullName">
        {{- 'Full Name'|t -}}
      </label>
      {{ input('text', 'fullName', address.fullName ?? '', {
        id: 'fullName',
        class: ['w-full', '[[classes.input]]']
      }) }}
      {{ _self.displayErrors(address, 'fullName') }}
  </div>

  {% set countries = craft.commerce.store.store.getCountriesList() %}
  {% set countryCode = address.countryCode ?? null %}

  <div class="my-2">
    <label for="countryCode">
      {{- 'Country'|t }} *
    </label>
    {% tag 'select' with {
      id: 'countryCode',
      name: 'countryCode',
      class: ['w-full', 'max-w-full', 'h-9', '[[classes.input]]', countries|length == 0 ? 'hidden' : ''],
    } %}
      {{ tag('option', {
        value: '',
        disabled: true,
        selected: countryCode is empty,
        text: 'Select country'|t ~ '...'
      }) }}
      {% for key, option in countries %}
        {% set optionValue = (countryCode ?: '') %}
        {{ tag('option', {
          value: key,
          selected: key == optionValue,
          text: option
        }) }}
      {% endfor %}
    {% endtag %}
    {{ _self.displayErrors(address, 'countryCode') }}
  </div>

  <div class="my-2">
    <label for="addressLine1">
      {{- 'Address 1'|t -}}
    </label>
    {{ input('text', 'addressLine1', address.addressLine1 ?? '', {
      id: 'addressLine1',
      class: ['w-full', '[[classes.input]]']
    }) }}
    {{ _self.displayErrors(address, 'addressLine1') }}
  </div>

  <div class="my-2">
    <label for="addressLine2">
      {{- 'Address 2'|t -}}
    </label>
    {{ input('text', 'addressLine2', address ? address.addressLine2 : '', {
      id: 'addressLine2',
      class: ['w-full', '[[classes.input]]']
    }) }}
    {{ _self.displayErrors(address, 'addressLine2') }}
  </div>

  {# City, state, and postal code fields #}
  <div class="md:flex md:-mx-4">
    <div class="md:w-1/3 md:mx-4 my-2">
      <label for="locality">
        {{- 'City'|t -}}
      </label>
      {{ input('text', 'locality', address.locality ?? '', {
        id: 'locality',
        class: ['w-full', '[[classes.input]]']
      }) }}
    </div>
    <div class="md:w-1/3 md:mx-4 my-2">
      <label for="state">
        {{- 'State'|t -}}
      </label>

      {% set administrativeAreas = craft.commerce.store.getStore().getAdministrativeAreasListByCountryCode() %}

      {% if administrativeAreas|length %}
      {% tag 'select' with {
        id: 'administrativeArea',
        name: 'administrativeArea',
        class: ['w-full', 'max-w-full', 'h-9', '[[classes.input]]'],
      } %}
        {{ tag('option', {
          value: '',
          disabled: true,
          selected: address.administrativeArea ?? false,
          text: 'Select state'|t ~ '...'
        }) }}
      {% endtag %}
      {% endif %}

      {{ input('text', 'administrativeArea', address.administrativeArea ?? '', {
        id: 'administrativeArea',
        class: ['w-full hidden', '[[classes.input]]']
      }) }}
      {{ _self.displayErrors(address, 'administrativeArea') }}
    </div>

    <div class="md:w-1/3 md:mx-4 my-2">
      {% set zipCode = address.postalCode ?? '' %}
      <label for="zipCode">
        {{- 'Postal Code'|t -}}
      </label>
      {{ input('text', 'postalCode', address.postalCode ?? '', {
        id: 'zipCode',
        class: ['w-full', '[[classes.input]]']
      }) }}
      {{ _self.displayErrors(address, 'postalCode') }}
    </div>
  </div>

  <div class="my-2">
    <label for="businessName">
      {{- 'Organization'|t -}}
    </label>
    {{ input('text', 'organization', address ? address.organization : '', {
      id: 'organization',
      class: ['w-full', '[[classes.input]]']
    }) }}
    {{ _self.displayErrors(address, 'organization') }}
  </div>

  <div class="md:flex md:-mx-4">
    <div class="md:w-1/2 md:mx-4 my-2">
      <label for="organizationTaxId">
        {{- 'Organization Tax ID'|t -}}
      </label>
      {{ input('text', 'organizationTaxId', address ? address.organizationTaxId : '', {
        id: 'organizationTaxId',
        class: ['w-full', '[[classes.input]]']
      }) }}
      {{ _self.displayErrors(address, 'organizationTaxId') }}
    </div>
  </div>
</div>

{% js %}
let states = {{ craft.commerce.store.getStore().getAdministrativeAreasListByCountryCode()|json_encode|raw }};
const countrySelect = document.querySelector('select#countryCode');
console.log(countrySelect);
countrySelect.addEventListener('change', ev => {
    console.log('change');
  const countryCode = ev.target.value;
  const stateSelect = document.querySelector('select#administrativeArea');
    console.log(stateSelect);
  const stateText = document.querySelector('#administrativeArea[type=text]');
    console.log(stateText);
  stateSelect.innerHTML = '';
  if (states[countryCode] && Object.keys(states[countryCode]).length) {
    stateSelect.classList.remove('hidden');
    stateSelect.setAttribute('name', 'administrativeArea');
    stateText.classList.add('hidden');
    stateText.removeAttribute('name');
    stateSelect.innerHTML = '<option value="">Select state...</option>';
    for (const key in states[countryCode]) {
      stateSelect.innerHTML += `<option value="${key}">${states[countryCode][key]}</option>`;
    }
  } else {
    stateSelect.classList.add('hidden');
    stateSelect.removeAttribute('name');
    stateText.classList.remove('hidden');
    stateText.setAttribute('name', 'administrativeArea');
  }
});

countrySelect.dispatchEvent(new Event('change'));
{% endjs %}